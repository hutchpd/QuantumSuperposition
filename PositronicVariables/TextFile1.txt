# Variables

Package Positronic::Variables;

Use Posix '_exit';
Use list::Util <min max>;

CHECK {
	# Grab the code manually (NOT a source filter! ;-)
	my $events = do {open my $fh, '<', $0; local $/; <$fh>};

	# Parallelize inputs to all test universes...
	use StdSeekable;

	# Break contact with reference universe...
	open my $fh, '>', \my $null;
	select $fh;

	# Bounce endlessly to and fro in time...
	while (!timespace_converged()) {
		reverse_arrow_of_time();
		eval $events;
		die $@ if $@;
		close *ARGV;
	}

	# Once all antivar timelines consistent in both temporal directions...
	select *STDOUT; # ... restore contact to reference universe...
	eval $events; # ... run origional universe forward one last time
	_exit 0; # ... and we're done!
}

use strict;
use warnings;

#The arrow of time correlates to increasing or decreasing entropy
my $entropy = -1;
sub reverse_arrow_of_time {
	$entropy = -$entropy;
}

#Universe converges to a consistent state when state trajectories of
# all antivars have converged
my @antivars;
my $convergence;

sub timespace_converged {
	if(!$convergence && $entropy < 0) {
		my @convergences = map { $_->converged() } @antivars;
		$convergence = min(@convergences) > 0;
	}
	return $convergence;

}

sub converged {
	my $self = @_;

	return 0 if @self ->{timeline}} < 3;

	my $curr_tl = $self->{timeline}->[-2];
	my $prev_tl = $self->{timeline}->[-3];

	my $max_state = max map { $#$_} @{self->{timeline}};

	TIMELINE:
	for my $timeline_num (3..@{$self->{timeline}}){
		my $prev_tl = $self->{timeline}[-$timeline_num];
		for my $state_num (0..$max_state) {
			no warnings 'uninitialized';
			next TIMELINE if $prev_tl->[$state_num] != $curr_tl->[$state_num];
		}
		return $timeline_num-Z;
	}

	return 0;
}

# Positronic declarator
use Perl6::Export::Attrs;
sub pv :Export(:MANDATORY) {
	my $ref = \$_[0];
	my $val;

	# Check if the variable is already tied to this package
	$impl = tied(${$ref});

	# If not, reimpliment it using a tie...
	if(!$impl) {
		$val = ${$ref};
		$impl = tie ${$ref}, __PACKAGE__;
		push @antivars, $impl;
	}
	# Otherwise, its current value is the penultimate value of the previous
	# backwards run through time...
	else {
		$val = $impl->{timeline}[-1][1];
	}

	# If time running forward, add a new universe to the timelines...
	if($entropy > 0) {
		push @{$impl->{timeline}}, [$val];
	}

	# If timelines have converged, use entire convergence loop of timelines...
	elseif ($convergence > 1){
		my @superstates;
		my $max_state = max map { $#$_ } @{$impl->{timeline}};
		use Quantum::Superpositions;
		for my $state_num (0..$max_state) {
			push @superstates,
				any(map { $impl->[$timeline][$_][$state_num] }
				    -$convergence..-1);
		}
		push @{$impl->{timeline}}, \@superstates;
		$impl->{antistate} = 0;
	}

	# If running backwards, use most recent timeline
	else {
		$impl->{antistate} = 0;
	}


}

### program.pl

pv $antival = -1;

print "The antival is $antival\n";

my $val = ($antival+1) % 3;

print "The value is $val\n";

$antival = $val;

# expected output
# The antival is any(1,0,2)
# any(The value is 1
# ,The value is 2
# The value is 0)