// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace PositronicVariables
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\xhabl\source\repos\QuantumSuperposition\PositronicVariables\readme.md"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class readme : readmeBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("# PositronicVariable (.NET Library)\r\nA time-looping variable container for quantu" +
                    "m misfits and deterministic dreamers.\r\n\r\n---\r\n\r\n`PositronicVariable<T>` lets you" +
                    "r code simulate values that evolve over iterative timelines. It\'s like if Schröd" +
                    "inger had a daily planner. This system plays nice with `QuBit<T>` superpositions" +
                    " from [QuantumSuperposition](https://www.nuget.org/packages/QuantumSuperposition" +
                    "), and introduces runtime convergence via timeline journaling, looped simulation" +
                    "s, and multiverse debugging.\r\n\r\n> This isn’t time travel.  \r\n> This is **time th" +
                    "erapy** for your variables.\r\n\r\n---\r\n\r\n## Features\r\n\r\n- Temporal Journaling: Vari" +
                    "ables store their history like over-sharers in a group chat.\r\n- Automatic Conver" +
                    "gence: Run code until state stabilization without writing a while loop.\r\n- Neura" +
                    "lNodule: Build quantum-flavored logic gates using positronic variables.\r\n- Time " +
                    "Reversal: Temporarily run logic in negative entropy mode to simulate parallel ti" +
                    "melines.\r\n- Seamless with QuBit<T>: Because pretending a variable can hold many " +
                    "states is *your thing now*.\r\n\r\n---\r\n\r\n## Getting Started\r\n\r\n### Installation\r\n\r\n" +
                    "Grab it from NuGet (coming soon, or possibly already available in a future you h" +
                    "aven\'t met yet).\r\n\r\n```\r\ndotnet add package PositronicVariables\r\n```\r\n\r\n---\r\n\r\n#" +
                    "# Example: Time-Looping Variable\r\n\r\n```csharp\r\nprivate static PositronicVariable" +
                    "<int> antival;\r\n\r\nprivate static void Main()\r\n{\r\n    // Clean slate\r\n    Positro" +
                    "nicRuntime.Instance.Reset();\r\n\r\n    // Initial state\r\n    antival = new Positron" +
                    "icVariable<int>(-1);\r\n\r\n    // Loop until convergence\r\n    PositronicVariable<in" +
                    "t>.RunConvergenceLoop(MainLogic);\r\n}\r\n\r\nprivate static void MainLogic()\r\n{\r\n    " +
                    "Console.WriteLine($\"The antival is {antival}\");\r\n    var val = (antival + 1) % 4" +
                    ";\r\n    Console.WriteLine($\"The value is {val}\");\r\n    antival.Assign(val);\r\n}\r\n`" +
                    "``\r\n\r\n### Output (after convergence)\r\n```\r\nThe antival is any(0, 1, 2, 3)\r\nThe v" +
                    "alue is any(1, 2, 3, 0)\r\n```\r\n\r\n---\r\n\r\n## How It Works\r\n\r\nWhen you call `RunConv" +
                    "ergenceLoop`, the library:\r\n\r\n1. Silently runs your code in **negative time** (d" +
                    "on’t worry, you don’t need a flux capacitor).\r\n2. Builds a **timeline** for each" +
                    " variable using `QuBit<T>` snapshots.\r\n3. Detects convergence by matching recent" +
                    " state cycles.\r\n4. Unifies results and runs your code one last time in **forward" +
                    " time** — now stable.\r\n\r\n---\r\n\r\n## Operators\r\n\r\nYes, your variables can pretend " +
                    "to be integers:\r\n```csharp\r\nvar v = new PositronicVariable<int>(1);\r\nvar x = v +" +
                    " 5;\r\nvar y = x % 3;\r\n```\r\n\r\nIt’s all syntactic sugar for probabilistic anxiety\r\n" +
                    "\r\n---\r\n\r\n## Neural Nodule: DIY Brainstorming\r\n\r\n```csharp\r\nvar x = new Positroni" +
                    "cVariable<int>(0);\r\nvar y = new PositronicVariable<int>(1);\r\n\r\nvar node = new Ne" +
                    "uralNodule<int>(inputs =>\r\n{\r\n    var sum = inputs.Sum();\r\n    return new QuBit<" +
                    "int>(new[] { sum % 5, (sum + 1) % 5 });\r\n});\r\n\r\nnode.Inputs.Add(x);\r\nnode.Inputs" +
                    ".Add(y);\r\n\r\n// Fires the activation function and pushes result to Output\r\nnode.F" +
                    "ire();\r\n\r\nConsole.WriteLine($\"Result: {node.Output}\");\r\n```\r\n\r\nYou can also run " +
                    "a full convergence loop on a network of nodes:\r\n```csharp\r\nNeuralNodule<int>.Con" +
                    "vergeNetwork(nodeA, nodeB, nodeC);\r\n```\r\n\r\n---\r\n\r\n## API Highlights\r\n\r\n```csharp" +
                    "\r\npublic class PositronicVariable<T>\r\n{\r\n    public void Assign(T value);\r\n    p" +
                    "ublic void Assign(PositronicVariable<T> other);\r\n    public void CollapseToLastS" +
                    "lice();\r\n    public static void RunConvergenceLoop(Action logic);\r\n    public in" +
                    "t Converged();\r\n    public void UnifyAll();\r\n    public QuBit<T> GetCurrentQBit(" +
                    ");\r\n    public IEnumerable<T> ToValues();\r\n}\r\n```\r\n\r\n---\r\n\r\n## What Is This Usef" +
                    "ul For?\r\n\r\n- Simulating feedback loops in logic\r\n- Declarative-style state propa" +
                    "gation\r\n- Neural graphs and causal networks\r\n- Philosophical debugging\r\n- Impres" +
                    "sing very specific kinds of nerds\r\n\r\n---\r\n\r\n## Limitations\r\n\r\n- Not thread-safe." +
                    " These variables are *emotionally* unstable.\r\n- Requires your types to be `struc" +
                    "t, IComparable`.\r\n- Can accidentally create infinite universes if you\'re not car" +
                    "eful (just like real life).\r\n\r\n---\r\n\r\n## License\r\n\r\nUnlicensed. Use it, break it" +
                    ", ship it, regret it.\r\n\r\n---\r\n\r\n## Questions or Paradoxes?\r\n\r\nYou can file an is" +
                    "sue, or collapse your current state and try again.\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class readmeBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
